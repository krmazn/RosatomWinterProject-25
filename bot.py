from config import TICKERS
from utils import get_token
from analysis import analyze_stock
from ml_forecast import predict_stock_price
from chart import send_stock_chart
from trend_classifier import classify_trend
from find_delta import calculate_delta
import telebot
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

bot = telebot.TeleBot(get_token())

@bot.message_handler(commands=['start'])
def send_welcome(message):
    chat_id = message.chat.id
    keyboard = telebot.types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    buttons = [telebot.types.KeyboardButton(ticker) for ticker in TICKERS]
    keyboard.add(*buttons)
    bot.send_message(chat_id, 
                     "‚ö†Ô∏è*–í–∞–∂–Ω–æ!* \n –ü—Ä–æ–≥–Ω–æ–∑—ã, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º—ã–µ —ç—Ç–∏–º –±–æ—Ç–æ–º, –æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ –∞–Ω–∞–ª–∏–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –º–æ–¥–µ–ª–∏ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞. –û–¥–Ω–∞–∫–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏–º–µ–π—Ç–µ –≤ –≤–∏–¥—É, —á—Ç–æ –ø—Ä–æ–≥–Ω–æ–∑—ã _–º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ—Ç–æ—á–Ω—ã–º–∏ –∏–ª–∏ –∏–∑–º–µ–Ω—è—Ç—å—Å—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–∞ —Ñ–∞–∫—Ç–æ—Ä–æ–≤._\n‚ùó *–°–æ–∑–¥–∞—Ç–µ–ª–∏ –±–æ—Ç–∞ –Ω–µ –Ω–µ—Å—É—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞ –ª—é–±—ã–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è, –ø—Ä–∏–Ω—è—Ç—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–∏—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤.*\n –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å—é –∏ –ø—Ä–∏–Ω–∏–º–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏—è –Ω–∞ —Å–≤–æ–π —Å—Ç—Ä–∞—Ö –∏ —Ä–∏—Å–∫.",
                       parse_mode="Markdown")
    bot.send_message(chat_id, '*–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–∫–µ—Ä:*', reply_markup=keyboard, parse_mode="Markdown")

@bot.message_handler(func=lambda message: message.text in TICKERS)
def select_ticker(message):
    chat_id = message.chat.id
    selected_ticker = message.text
    bot.send_message(chat_id, f'üìä –¢–∏–∫–µ—Ä *{selected_ticker}* –≤—ã–±—Ä–∞–Ω. –û–∂–∏–¥–∞–π—Ç–µ –∞–Ω–∞–ª–∏–∑...', parse_mode="Markdown")

    try:
        # –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö
        data = analyze_stock(selected_ticker)
        last_price = float(data["Close"].iloc[-1])
        signal_text = f'üìå –ê–Ω–∞–ª–∏–∑ {selected_ticker}:\n–ü–æ—Å–ª–µ–¥–Ω—è—è —Ü–µ–Ω–∞: *${last_price:.2f}*\n'
        bot.send_message(chat_id, signal_text, parse_mode="Markdown")

        # –ü—Ä–æ–≥–Ω–æ–∑
        predicted_price = predict_stock_price(selected_ticker)
        bot.send_message(chat_id, f'üîÆ _–ü—Ä–æ–≥–Ω–æ–∑ —Ü–µ–Ω—ã –Ω–∞ –∑–∞–≤—Ç—Ä–∞: ${predicted_price:.2f} ({calculate_delta(f'{last_price:.2f}', f'{predicted_price:.2f}')})_', parse_mode="Markdown")

        # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç—Ä–µ–Ω–¥–∞
        trend = classify_trend(selected_ticker)
        bot.send_message(chat_id, f'üìä {trend}')

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞
        send_stock_chart(selected_ticker, chat_id)
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")
        bot.send_message(chat_id, f'–û—à–∏–±–∫–∞: {str(e)}')

if __name__ == '__main__':
    try:
        bot.polling(none_stop=True)
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ polling")
